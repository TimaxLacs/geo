"use client";

import { SidebarLayout } from "hasyx/components/sidebar/layout";
import sidebar from "@/app/sidebar";
import pckg from "@/package.json";
import { useState, useRef, useEffect } from "react";
import { Geo, GeoImperativeHandle } from "../providers/lib/index";
import { LatLng, ProviderId, MarkerData, ProviderMarkerHandle, ZoneData, ProviderZoneHandle, ZoneType } from "@/lib/core/geo-types";
import { v4 as uuidv4 } from 'uuid';
import { isEqual } from 'lodash';
import { MarkersControlPanel } from "@/components/markers-panel";
// –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç ZonesPanel

const MAP_OPTIONS: { label: string; value: ProviderId }[] = [
  { label: "–Ø–Ω–¥–µ–∫—Å", value: "yandex" },
  { label: "–ì—É–≥–ª", value: "google" },
  { label: "2–ì–ò–°", value: "2gis" },
];

function CodeTemplate({ provider, params }: { provider: string; params: any }) {
  if (!provider) return null;
  let componentName = '';
  switch (provider) {
    case 'yandex': componentName = 'YandexMap'; break;
    case 'google': componentName = 'GoogleMap'; break;
    case '2gis': componentName = 'TwoGISMap'; break;
    default: componentName = 'Map';
  }
  const paramStr = Object.entries(params)
    .map(([k, v]) => `${k}={${typeof v === 'string' ? `"${v}"` : v}}`)
    .join(' ');
  return (
    <div className="mt-4 bg-gray-900 text-green-400 p-4 rounded font-mono text-sm overflow-x-auto">
      {`<${componentName} ${paramStr} />`}
    </div>
  );
}

function ProviderSelector({ selected, setSelected }: {
  selected: ProviderId | "";
  setSelected: (v: ProviderId | "") => void;
}) {
  return (
    <div>
      <h3 className="font-semibold text-sidebar-foreground mb-3">
        –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞—Ä—Ç
      </h3>
      <select
        className="w-full p-2 rounded-md bg-sidebar-accent text-sidebar-foreground border border-sidebar-border focus:outline-none focus:ring-2 focus:ring-sidebar-ring"
        value={selected}
        onChange={e => setSelected(e.target.value as ProviderId | "")}
      >
        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É</option>
        {MAP_OPTIONS.map(option => (
          <option key={option.value} value={option.value}>{option.label}</option>
        ))}
      </select>
    </div>
  );
}

function SettingMapSelector({ onUpdate, position }: { 
  onUpdate: (params: { lat: number; lng: number; zoom: number; width: number; height: number }) => void;
  position: { lat: number; lng: number; zoom: number };
}){
  const [zoom, setZoom] = useState(13);
  const [lat, setLat] = useState(55.7558);
  const [lng, setLng] = useState(37.6173);
  const [width, setWidth] = useState(800);
  const [height, setHeight] = useState(500);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–Ω–ø—É—Ç—ã —Å –ø–æ–∑–∏—Ü–∏–µ–π –∫–∞—Ä—Ç—ã
  useEffect(() => {
    setLat(position.lat);
    setLng(position.lng);
    setZoom(position.zoom);
  }, [position]);
  
  const handleUpdate = () => {
    onUpdate({ lat, lng, zoom, width, height });
  };
  
  return(
    <div className="mt-4">
      <h3 className="font-semibold text-sidebar-foreground mb-3">
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ä—Ç—ã
      </h3>
      <div className="grid grid-cols-3 gap-3 mb-3">
        <div>
          <label className="block text-xs font-medium text-sidebar-foreground/70 mb-1">
            –®–∏—Ä–æ—Ç–∞
          </label>
          <input
            type="number"
            step="0.0001"
            value={lat}
            onChange={(e) => setLat(Number(e.target.value))}
            className="w-full p-2 rounded-md bg-sidebar-accent text-sidebar-foreground border border-sidebar-border focus:outline-none focus:ring-2 focus:ring-sidebar-ring text-sm"
            placeholder="55.7558"
          />
        </div>
        <div>
          <label className="block text-xs font-medium text-sidebar-foreground/70 mb-1">
            –î–æ–ª–≥–æ—Ç–∞
          </label>
          <input
            type="number"
            step="0.0001"
            value={lng}
            onChange={(e) => setLng(Number(e.target.value))}
            className="w-full p-2 rounded-md bg-sidebar-accent text-sidebar-foreground border border-sidebar-border focus:outline-none focus:ring-2 focus:ring-sidebar-ring text-sm"
            placeholder="37.6173"
          />
        </div>
        <div>
          <label className="block text-xs font-medium text-sidebar-foreground/70 mb-1">
            –ú–∞—Å—à—Ç–∞–±
          </label>
          <input
            type="number"
            step="1"
            min="1"
            max="20"
            value={zoom}
            onChange={(e) => setZoom(Number(e.target.value))}
            className="w-full p-2 rounded-md bg-sidebar-accent text-sidebar-foreground border border-sidebar-border focus:outline-none focus:ring-2 focus:ring-sidebar-ring text-sm"
            placeholder="13"
          />
        </div>
      </div>
      
      <h3 className="font-semibold text-sidebar-foreground mb-3 mt-4">
        –†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã
      </h3>
      <div className="grid grid-cols-2 gap-3 mb-3">
        <div>
          <label className="block text-xs font-medium text-sidebar-foreground/70 mb-1">
            –®–∏—Ä–∏–Ω–∞ (px)
          </label>
          <input
            type="number"
            step="50"
            min="200"
            max="2000"
            value={width}
            onChange={(e) => setWidth(Number(e.target.value))}
            className="w-full p-2 rounded-md bg-sidebar-accent text-sidebar-foreground border border-sidebar-border focus:outline-none focus:ring-2 focus:ring-sidebar-ring text-sm"
            placeholder="800"
          />
        </div>
        <div>
          <label className="block text-xs font-medium text-sidebar-foreground/70 mb-1">
            –í—ã—Å–æ—Ç–∞ (px)
          </label>
          <input
            type="number"
            step="50"
            min="200"
            max="1500"
            value={height}
            onChange={(e) => setHeight(Number(e.target.value))}
            className="w-full p-2 rounded-md bg-sidebar-accent text-sidebar-foreground border border-sidebar-border focus:outline-none focus:ring-2 focus:ring-sidebar-ring text-sm"
            placeholder="500"
          />
        </div>
      </div>
      
            <button
        onClick={handleUpdate}
        className="w-full bg-primary hover:bg-opacity-90 text-primary-foreground font-medium py-2 px-4 rounded-md transition-colors"
      >
        –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É
      </button>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–æ–Ω—ã
function ZoneCard({ zone, setZones }: { zone: ZoneData, setZones: React.Dispatch<React.SetStateAction<ZoneData[]>> }) {
  const handleDelete = () => {
    setZones(prev => prev.filter(z => z.id !== zone.id));
  };

  const toggleEditable = () => {
    setZones(prev => prev.map(z => z.id === zone.id ? { ...z, editable: !z.editable } : z));
  };

  const handleRadiusChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newRadius = Number(e.target.value);
    setZones(prev =>
      prev.map(z =>
        z.id === zone.id ? { ...z, radius: newRadius } : z
      )
    );
  };

  return (
    <div className="p-3 bg-sidebar-accent rounded mb-2 space-y-2">
      <div className="flex justify-between items-center">
        <span className="text-sm font-medium text-sidebar-foreground truncate pr-2">
          {zone.meta?.title || `${zone.type} ${zone.id.slice(0, 4)}`}
        </span>
        <div className="flex space-x-1 flex-shrink-0">
          <button
            onClick={toggleEditable}
            className={`p-1.5 text-xs rounded transition-colors ${
              zone.editable 
                ? 'bg-primary text-primary-foreground' 
                : 'bg-sidebar-accent hover:bg-sidebar-accent-foreground/20 text-sidebar-foreground'
            }`}
            title={zone.editable ? "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" : "–í–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"}
          >
            ‚úèÔ∏è
          </button>
          <button
            onClick={handleDelete}
            className="p-1.5 text-xs bg-destructive text-destructive-foreground rounded hover:bg-destructive/90"
            title="–£–¥–∞–ª–∏—Ç—å –∑–æ–Ω—É"
          >
            üóëÔ∏è
          </button>
        </div>
      </div>
      
      {zone.type === 'circle' && (
        <div className="pt-2 border-t border-sidebar-border">
          <label className="block text-xs font-medium text-sidebar-foreground/70 mb-1">
            –†–∞–¥–∏—É—Å (–≤ –º–µ—Ç—Ä–∞—Ö)
          </label>
          <input
            type="number"
            step="100"
            value={zone.radius || 0}
            onChange={handleRadiusChange}
            className="w-full p-2 rounded-md bg-sidebar text-sidebar-foreground border border-sidebar-border focus:outline-none focus:ring-2 focus:ring-sidebar-ring text-sm"
            placeholder="1000"
          />
        </div>
      )}
    </div>
  );
}

export default function Page() {
  const [selected, setSelected] = useState<ProviderId | "">("yandex");
  const geoRef = useRef<GeoImperativeHandle>(null);
  const [mapSize, setMapSize] = useState({ width: 800, height: 500 });
  const [markers, setMarkers] = useState<MarkerData[]>([]);
  const [markerHandles, setMarkerHandles] = useState<Record<string, { handle: ProviderMarkerHandle, marker: MarkerData }>>({});
  const [readyProvider, setReadyProvider] = useState<ProviderId | "">("");

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–æ–Ω
  const [zones, setZones] = useState<ZoneData[]>([]);
  const [zoneHandles, setZoneHandles] = useState<Record<string, ProviderZoneHandle>>({});
  const [drawingMode, setDrawingMode] = useState<ZoneType | null>(null);
  const [currentPolygonPoints, setCurrentPolygonPoints] = useState<LatLng[]>([]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  useEffect(() => {
    const isReady = selected === readyProvider;
    if (!geoRef.current || !selected || !isReady) return;

    const currentMarkerIds = markers.map(m => m.id);
    const handledMarkerIds = Object.keys(markerHandles);

    // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    handledMarkerIds.forEach(id => {
      if (!currentMarkerIds.includes(id)) {
        geoRef.current?.removeMarker(markerHandles[id].handle);
        setMarkerHandles(prev => {
          const newHandles = { ...prev };
          delete newHandles[id];
          return newHandles;
        });
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    markers.forEach(marker => {
      const existing = markerHandles[marker.id];
      
      if (existing) {
        // –ú–∞—Ä–∫–µ—Ä —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if (
          existing.marker.position.lat !== marker.position.lat || 
          existing.marker.position.lng !== marker.position.lng
        ) {
          geoRef.current?.updateMarkerPosition(existing.handle, marker.position);
        }
        
        // –î–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º lodash.isEqual –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if (!isEqual(existing.marker.meta, marker.meta)) {
          geoRef.current?.updateMarker(existing.handle, marker);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—à–µ–º –∫—ç—à–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –º–æ–≥–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
        if (existing.marker !== marker) {
          setMarkerHandles(prev => ({
            ...prev,
            [marker.id]: { ...existing, marker: marker }
          }));
        }

      } else {
        // –ù–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if (marker.provider === selected) {
          
          const handleDragEnd = async (newPosition: LatLng) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            let newAddress = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å';
            try {
              const results = await geoRef.current?.reverseGeocode(newPosition);
              if (results && results.length > 0) {
                newAddress = results[0].text;
              }
            } catch (error) {
              console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏:", error);
            }
            
            setMarkers(prev => 
              prev.map(m => m.id === marker.id ? { ...m, position: newPosition, meta: { ...m.meta, address: newAddress } } : m)
            );
          };

          const handle = geoRef.current?.addMarker(marker, handleDragEnd);

          if (handle) {
            setMarkerHandles(prev => ({ ...prev, [marker.id]: { handle, marker: marker } }));
          }
        }
      }
    });

  }, [markers, selected, geoRef, readyProvider]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–æ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  useEffect(() => {
    const isReady = selected === readyProvider;
    if (!geoRef.current || !selected || !isReady) return;
  
    const currentZoneIds = zones.map(z => z.id);
    const handledZoneIds = Object.keys(zoneHandles);
  
    // –£–¥–∞–ª—è–µ–º –∑–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    handledZoneIds.forEach(id => {
      if (!currentZoneIds.includes(id)) {
        zoneHandles[id].remove();
        setZoneHandles(prev => {
          const newHandles = { ...prev };
          delete newHandles[id];
          return newHandles;
        });
      }
    });
  
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–æ–Ω—ã
    zones.forEach(zone => {
      const existingHandle = zoneHandles[zone.id];
      
      if (existingHandle) {
        // –ó–æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ
        existingHandle.update(zone);
        if (zone.editable !== undefined) {
          existingHandle.setEditable(zone.editable);
        }
      } else {
        // –ù–æ–≤–∞—è –∑–æ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
        if (zone.provider === selected) {
          const onEditEnd = (newGeometry: LatLng[] | LatLng, newRadius?: number) => {
            setZones(prev => prev.map(z => {
              if (z.id === zone.id) {
                const updatedZone = { ...z, geometry: newGeometry };
                if (newRadius !== undefined && updatedZone.type === 'circle') {
                  updatedZone.radius = newRadius;
                }
                return updatedZone;
              }
              return z;
            }));
          };

          const handle = geoRef.current?.addZone(zone, onEditEnd);
          if (handle) {
            setZoneHandles(prev => ({ ...prev, [zone.id]: handle }));
          }
        }
      }
    });
  
  }, [zones, selected, geoRef, readyProvider]);


  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∑–æ–Ω
  useEffect(() => {
    if (!drawingMode || !geoRef.current || selected !== readyProvider) return;

    const unsubscribe = geoRef.current.onMapClick((coords) => {
      if (drawingMode === 'circle') {
        const newZone: ZoneData = {
          id: uuidv4(),
          provider: selected as ProviderId,
          type: 'circle',
          geometry: coords,
          radius: 1000, // 1 –∫–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          editable: false, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
          meta: { title: `–ö—Ä—É–≥ #${zones.length + 1}` },
          style: { fillColor: '#ff000033', strokeColor: '#ff0000', strokeWidth: 2 },
        };
        setZones(prev => [...prev, newZone]);
        setDrawingMode(null); // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      } else if (drawingMode === 'polygon' || drawingMode === 'polyline') {
        const updatedPoints = [...currentPolygonPoints, coords];
        setCurrentPolygonPoints(updatedPoints);
        // –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞/–ª–∏–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –≤ UI
      } else if (drawingMode === 'rectangle') {
        if (currentPolygonPoints.length === 0) {
          // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –∑–∞–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
          setCurrentPolygonPoints([coords]);
        } else {
          // –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
          const p1 = currentPolygonPoints[0];
          const p2 = coords;
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏–∑ –¥–≤—É—Ö –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
          const rectangleGeometry: LatLng[] = [
            p1,
            { lat: p1.lat, lng: p2.lng },
            p2,
            { lat: p2.lat, lng: p1.lng }
          ];

          const newZone: ZoneData = {
            id: uuidv4(),
            provider: selected as ProviderId,
            type: 'polygon', // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø–æ–ª–∏–≥–æ–Ω
            geometry: rectangleGeometry,
            editable: false, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
            meta: { title: `–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ #${zones.length + 1}` },
            style: { fillColor: '#ff8c0033', strokeColor: '#ff8c00', strokeWidth: 2 },
          };
          setZones(prev => [...prev, newZone]);
          setCurrentPolygonPoints([]);
          setDrawingMode(null);
        }
      }
    });

    return () => unsubscribe();
  }, [drawingMode, geoRef, selected, readyProvider, currentPolygonPoints, zones.length]);


  // –î–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  const [inputPosition, setInputPosition] = useState({ lat: 55.7558, lng: 37.6173, zoom: 13 }); // –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ—Ç –∫–∞—Ä—Ç—ã
  const [mapPosition, setMapPosition] = useState({ lat: 55.7558, lng: 37.6173, zoom: 13 }); // –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ—Ç –∏–Ω–ø—É—Ç–æ–≤
  
  const [mapKey, setMapKey] = useState(0);

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ä—Ç—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ mapPosition (–Ω–µ –∏–∑ inputPosition!)
  const mapParams = { lng: mapPosition.lng, lat: mapPosition.lat, zoom: mapPosition.zoom, width: mapSize.width, height: mapSize.height };
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–µ—Ä—Ö –ø—Ä–∏ –±–æ–ª—å—à–æ–π —à–∏—Ä–∏–Ω–µ –∫–∞—Ä—Ç—ã
  const isWideMap = mapParams.width > 1200;
  
  const handleMapUpdate = (params: { lat: number; lng: number; zoom: number; width: number; height: number }) => {
    console.log('handleMapUpdate called (–æ—Ç –∏–Ω–ø—É—Ç–æ–≤):', params);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ä–∞–∑–º–µ—Ä—ã
    const sizeChanged = mapSize.width !== params.width || mapSize.height !== params.height;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã
    setMapSize({ width: params.width, height: params.height });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ä—Ç—ã (–∫–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∏—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã)
    setMapPosition({ lat: params.lat, lng: params.lng, zoom: params.zoom });
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–Ω–ø—É—Ç—ã
    setInputPosition({ lat: params.lat, lng: params.lng, zoom: params.zoom });
    
    // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç—É
    if (sizeChanged) {
      setMapKey(prev => prev + 1);
    }
  };
  
  const handlePositionChange = (position: { lat: number; lng: number; zoom: number }) => {
    console.log('handlePositionChange called (–æ—Ç –¥—Ä–∞–≥–∞ –∫–∞—Ä—Ç—ã):', position);
    
    // –û—Ç –¥—Ä–∞–≥–∞ –∫–∞—Ä—Ç—ã - –æ–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –∏–Ω–ø—É—Ç—ã, –∫–∞—Ä—Ç—É –ù–ï —Ç—Ä–æ–≥–∞–µ–º!
    setInputPosition(position);
  };

  const handleSearchResultClick = (obj: any) => {
    if (!selected) return;

    // 1. –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    const newPosition = { lat: obj.coords.lat, lng: obj.coords.lng, zoom: 17 }; // –ü—Ä–∏–±–ª–∏–∂–∞–µ–º –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    setMapPosition(newPosition);
    setInputPosition(newPosition); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–Ω–ø—É—Ç—ã

    // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
    const newMarker: MarkerData = {
      id: uuidv4(),
      provider: selected,
      position: obj.coords,
      meta: {
        title: obj.name,
        description: obj.text,
        address: obj.text, // –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
      }
    };
    setMarkers(prev => [...prev, newMarker]);
  };

  return (
    <SidebarLayout sidebarData={sidebar} breadcrumb={[{ title: pckg.name, link: '/' }]}>
      <div className="p-6">
        {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±–∫—É—é —Å–µ—Ç–∫—É —Å —É—á–µ—Ç–æ–º —à–∏—Ä–∏–Ω—ã –∫–∞—Ä—Ç—ã */}
        <div className={`grid gap-6 ${
          isWideMap 
            ? 'grid-cols-1' // –ü—Ä–∏ —à–∏—Ä–æ–∫–æ–π –∫–∞—Ä—Ç–µ - –ø–∞–Ω–µ–ª—å —Å–≤–µ—Ä—Ö—É
            : 'grid-cols-[1fr_300px]' // –ü—Ä–∏ –æ–±—ã—á–Ω–æ–π –∫–∞—Ä—Ç–µ - –ø–∞–Ω–µ–ª—å —Å–ø—Ä–∞–≤–∞
        }`}>
          
          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∫–∞—Ä—Ç–æ–π - –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π –≤ DOM */}
          <div style={{ width: '100%', height: '100%', position: 'relative' }}>
            {selected ? (
              <div className="space-y-4">
                <div 
                  style={{ width: mapSize.width + 'px', height: mapSize.height + 'px', border: '2px solid #e5e7eb', borderRadius: '8px' }}
                >
                  <Geo 
                    key={`${selected}-${mapKey}`}
                    ref={geoRef} 
                    provider={selected} 
                    onPosition={handlePositionChange}
                    onReady={() => setReadyProvider(selected as ProviderId)}
                    {...mapParams} 
                  />
                </div>
                <CodeTemplate provider={selected} params={mapParams} />
              </div>
            ) : (
              <div className="flex items-center justify-center h-96 bg-gray-100 dark:bg-gray-800 rounded-lg" style={{ width: '100%', height: '100%' }}>
                <div className="text-center text-gray-500 dark:text-gray-400">
                  <h2 className="text-xl font-semibold mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–∞—Ä—Ç</h2>
                  <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å {isWideMap ? '–≤–Ω–∏–∑—É' : '—Å–ø—Ä–∞–≤–∞'} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã</p>
                </div>
              </div>
            )}
          </div>

          {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ - —Å–ø—Ä–∞–≤–∞ –∏–ª–∏ —Å–Ω–∏–∑—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã */}
          <div className="w-full min-h-0">
            <div className="p-4 bg-sidebar border border-sidebar-border rounded-lg h-full overflow-y-scroll"> 
              <ProviderSelector selected={selected} setSelected={setSelected} />
              {/* –ü–µ—Ä–µ–¥–∞–µ–º inputPosition –≤ –ø–∞–Ω–µ–ª—å (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç –∫–∞—Ä—Ç—ã) */}
              <SettingMapSelector onUpdate={handleMapUpdate} position={inputPosition}/>
              
              {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω–∞–º–∏ */}
              <div className="mt-4 pt-4 border-t border-sidebar-border">
                <h3 className="font-semibold text-sidebar-foreground mb-3">
                  –ì–µ–æ-–∑–æ–Ω—ã
                </h3>

                <div className="grid grid-cols-2 gap-2 mb-3">
                  <button
                    onClick={() => setDrawingMode('circle')}
                    className={`p-2 text-sm rounded transition-colors ${drawingMode === 'circle' ? 'bg-primary text-primary-foreground' : 'bg-sidebar-accent hover:bg-sidebar-accent-foreground/20 text-sidebar-foreground'}`}
                  >
                    + –ö—Ä—É–≥
                  </button>
                  <button
                    onClick={() => {
                      setDrawingMode('polygon');
                      setCurrentPolygonPoints([]);
                    }}
                    className={`p-2 text-sm rounded transition-colors ${drawingMode === 'polygon' ? 'bg-primary text-primary-foreground' : 'bg-sidebar-accent hover:bg-sidebar-accent-foreground/20 text-sidebar-foreground'}`}
                  >
                    + –ü–æ–ª–∏–≥–æ–Ω
                  </button>
                  <button
                    onClick={() => {
                      setDrawingMode('polyline');
                      setCurrentPolygonPoints([]);
                    }}
                    className={`p-2 text-sm rounded transition-colors ${drawingMode === 'polyline' ? 'bg-primary text-primary-foreground' : 'bg-sidebar-accent hover:bg-sidebar-accent-foreground/20 text-sidebar-foreground'}`}
                  >
                    + –õ–∏–Ω–∏—è
                  </button>
                  <button
                    onClick={() => {
                      setDrawingMode('rectangle');
                      setCurrentPolygonPoints([]);
                    }}
                    className={`p-2 text-sm rounded transition-colors ${drawingMode === 'rectangle' ? 'bg-primary text-primary-foreground' : 'bg-sidebar-accent hover:bg-sidebar-accent-foreground/20 text-sidebar-foreground'}`}
                  >
                    + –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                  </button>
                </div>
                
                { (drawingMode === 'polygon' || drawingMode === 'polyline') && currentPolygonPoints.length > 0 && (
                  <div className="p-2 bg-sidebar-accent rounded mb-3 text-center">
                      <p className="text-xs text-sidebar-foreground mb-2">
                          –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫–∏. <br/>
                          –¢–æ—á–µ–∫: {currentPolygonPoints.length}
                      </p>
                      <button
                          onClick={() => {
                            if (currentPolygonPoints.length < (drawingMode === 'polygon' ? 3 : 2) || !selected) return;

                            const newZone: ZoneData = {
                              id: uuidv4(),
                              provider: selected as ProviderId,
                              type: drawingMode as 'polygon' | 'polyline',
                              geometry: currentPolygonPoints,
                              editable: false,
                              meta: { title: `${drawingMode === 'polygon' ? '–ü–æ–ª–∏–≥–æ–Ω' : '–õ–∏–Ω–∏—è'} #${zones.length + 1}` },
                              style: { 
                                fillColor: drawingMode === 'polygon' ? '#00ff0033' : undefined,
                                strokeColor: '#00ff00', 
                                strokeWidth: 3 
                              },
                            };
                            setZones(prev => [...prev, newZone]);
                            setCurrentPolygonPoints([]);
                            setDrawingMode(null);
                          }}
                          disabled={currentPolygonPoints.length < (drawingMode === 'polygon' ? 3 : 2)}
                          className="w-full p-2 text-sm rounded bg-green-600 text-white disabled:bg-gray-500"
                      >
                          –ó–∞–≤–µ—Ä—à–∏—Ç—å
                      </button>
                  </div>
                )}

                { drawingMode === 'rectangle' && (
                  <div className="p-2 bg-sidebar-accent rounded mb-3 text-center">
                      <p className="text-xs text-sidebar-foreground">
                          –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å {currentPolygonPoints.length === 0 ? '–Ω–∞—á–∞–ª—å–Ω—ã–π' : '–∫–æ–Ω–µ—á–Ω—ã–π'} —É–≥–æ–ª.
                      </p>
                  </div>
                )}

                <div className="space-y-2">
                  {zones.map(zone => (
                    <ZoneCard key={zone.id} zone={zone} setZones={setZones} />
                  ))}
                </div>
              </div>

              {/* –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞–º–∏ –∏ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–æ–º */}
              <MarkersControlPanel
                markers={markers}
                setMarkers={setMarkers}
                currentLat={inputPosition.lat}
                currentLng={inputPosition.lng}
                provider={selected as ProviderId}
                geoHandle={geoRef}
                isMapReady={selected === readyProvider}
                onSearchResultClick={handleSearchResultClick}
              />
              </div>
          </div>
        </div>
      </div>
    </SidebarLayout>
  );
}